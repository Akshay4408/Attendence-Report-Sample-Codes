#!/usr/bin/env python
# coding: utf-8

# In[19]:



import pandas as pd
import numpy as np


# In[20]:




apr1 = pd.read_excel(r"C:\Users\reportsn\Desktop\FutGen\one.xlsx")
apr1 = apr1.iloc[3:]
#apr1.apr1[:-1,:]
apr1 = apr1.rename(columns=apr1.iloc[0]).drop(apr1.index[0])
apr1 = apr1.iloc[:-1 , :]

apr1.head()


# In[21]:




# APR
apr2 = pd.read_excel(r"C:\Users\reportsn\Desktop\FutGen\two.xlsx")

apr2 = apr2.iloc[3:]
#apr2.iloc[:-1,:]

apr2 = apr2.rename(columns=apr2.iloc[0]).drop(apr2.index[0])

apr2 = apr2.iloc[:-1 , :]

apr2.head()


# In[22]:




#CALL EXPORT
rw = pd.read_excel(r"C:\Users\reportsn\Desktop\FutGen\Raw.xlsx")

rw.head()


# In[23]:


DL = pd.read_excel(r"C:\Users\reportsn\Desktop\FutGen\Dispositions List\Dispositions Dataa.xlsx")
DL.head()


# In[24]:


Report = pd.merge(rw, DL, how='left',
        left_on='status_name', right_on='status_name')
Report = Report.rename(columns = {'full_name' : 'USER NAME'})

Report.head()


# In[25]:


Report =pd.pivot_table(data= Report, index = ['USER NAME'], columns = ['Dispositions'],values = 'phone_number_dialed', aggfunc = np.size, fill_value=0, margins = True, margins_name= 'Total')

Report.head()


# In[26]:


#Report.to_excel(r'C:\Users\reportsn\Desktop\Akshay\Alphanity APR.xlsx')


# In[27]:




apr1 = apr1[['ID','USER NAME', 'TALK', 'PAUSE', 'WAIT']]
#apr1 = apr1.rename(columns = {'TOTAL' : 'LOGIN'})
apr1.head()



# In[28]:



apr2 = apr2[['ID','USER NAME', 'TOTAL', 'LunchB', 'TeaBre']]
apr2 = apr2.rename(columns = {'TOTAL' : 'LOGIN'})
apr2.head()


# In[29]:


Result = pd.merge(apr1, apr2, how = 'inner', on = 'USER NAME')
Result 


# In[30]:


Result = pd.merge(Result, Report, how = 'inner', on = 'USER NAME')
Result


# In[31]:


from datetime import date
from datetime import timedelta
  


# In[32]:


Result['DATE'] =  date.today()
#Result['DATE']  =Result['DATE'].dt.strftime("%m/%d/%y")
Result['DATE']  =  Result['DATE'] - timedelta(days = 1)

Result.head()


# In[33]:


Result = Result[['DATE', 'ID_x','USER NAME', 'TALK',   'LOGIN', 'LunchB','TeaBre','Connect', 'Not Connect', 'Total', 'PAUSE', 'WAIT']]

Result.head()


# In[34]:


Result['Lhour'] = pd.to_datetime(Result['LunchB'], format='%H:%M:%S').dt.hour
Result['Lminutes'] = pd.to_datetime(Result['LunchB'], format='%H:%M:%S').dt.minute
Result['Lsecond'] = pd.to_datetime(Result['LunchB'], format='%H:%M:%S').dt.second



Result['Lhour'] = Result['Lhour'] * 3600
Result['Lminutes'] = Result['Lminutes'] * 60


Result['Llunch']  = Result['Lhour'] + Result['Lminutes'] + Result['Lsecond']


# In[35]:


Result['Thour'] = pd.to_datetime(Result['TeaBre'], format='%H:%M:%S').dt.hour
Result['Tminutes'] = pd.to_datetime(Result['TeaBre'], format='%H:%M:%S').dt.minute
Result['Tsecond'] = pd.to_datetime(Result['TeaBre'], format='%H:%M:%S').dt.second


Result['Thour']= Result['Thour'] * 3600
Result['Tminutes'] = Result['Tminutes'] * 60

Result['Ttea']  = Result['Thour'] +Result['Tminutes'] + Result['Tsecond']


# In[36]:


Result['Break'] = Result['Llunch'] + Result['Ttea'] 


# In[37]:


import operator
fmt = operator.methodcaller('strftime', '%H:%M:%S')
Result['BREAK'] = pd.to_datetime(Result['Break'], unit='s').map(fmt)


# In[38]:


Result1 = Result


# In[39]:


Result1['Thour'] = pd.to_datetime(Result1['TALK'], format='%H:%M:%S').dt.hour
Result1['Tminutes'] = pd.to_datetime(Result1['TALK'], format='%H:%M:%S').dt.minute
Result1['Tsecond'] = pd.to_datetime(Result1['TALK'], format='%H:%M:%S').dt.second


Result1['Thour'] = Result1['Thour'] * 3600
Result1['Tminutes'] = Result1['Tminutes'] * 60

Result1['Ttalk']  = Result1['Thour'] + Result1['Tminutes'] + Result1['Tsecond']


# In[40]:


Result1['Whour'] = pd.to_datetime(Result1['WAIT'], format='%H:%M:%S').dt.hour
Result1['Wminutes'] = pd.to_datetime(Result1['WAIT'], format='%H:%M:%S').dt.minute
Result1['Wsecond'] = pd.to_datetime(Result1['WAIT'], format='%H:%M:%S').dt.second



Result1['Whour']= Result1['Whour'] * 3600
Result1['Wminutes'] = Result1['Wminutes'] * 60

Result1['Wwait']  = Result1['Whour'] +Result1['Wminutes'] + Result1['Wsecond']


# In[41]:


Result1['Phour'] = pd.to_datetime(Result1['PAUSE'], format='%H:%M:%S').dt.hour
Result1['Pminutes'] = pd.to_datetime(Result1['PAUSE'], format='%H:%M:%S').dt.minute
Result1['Psecond'] = pd.to_datetime(Result1['PAUSE'], format='%H:%M:%S').dt.second



Result1['Phour']= Result1['Phour'] * 3600
Result1['Pminutes'] = Result1['Pminutes'] * 60

Result1['Ppause']  = Result1['Phour'] +Result1['Pminutes'] + Result1['Psecond']


# In[42]:


Result1['Total Handling Time1'] = Result1['Ttalk'] + Result1['Wwait'] + Result1['Ppause']


# In[43]:


import operator
fmt = operator.methodcaller('strftime', '%H:%M:%S')
Result1['Total Handling Time'] = pd.to_datetime(Result1['Total Handling Time1'], unit='s').map(fmt)


# In[44]:


Result1['AHT1'] = Result1['Total Handling Time1'] / Result1['Total']


# In[45]:


Result1["AHT1"].fillna(0, inplace = True)


# In[46]:


import operator
fmt = operator.methodcaller('strftime', '%H:%M:%S')
Result1['AHT'] = pd.to_datetime(Result1['AHT1'] , unit='s').map(fmt)

Result1 = Result1.drop(columns=['Total Handling Time1', 'AHT1'])
Result1.head()


# In[47]:


Result1 = Result1[['DATE', 'ID_x','USER NAME', 'LOGIN', 'TALK','BREAK','Total Handling Time','AHT','Connect', 'Not Connect', 'Total']]
Result1 = Result1.rename(columns = {'ID_x' : 'ID'})

Result1.head()


# In[49]:


Result1.to_excel(r'C:\Users\reportsn\Desktop\Akshay\Future Gen APR.xlsx')


# In[ ]:





